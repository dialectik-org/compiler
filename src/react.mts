import { CompilerOptions, ReactProjectData, ReactTemplateType, Task } from './types.mjs'
import { copyFileSync, existsSync, lstatSync, mkdirSync, readdirSync, rmSync, unlinkSync } from 'fs'
import { tmpdir } from 'os';
import { basename, dirname, extname, join } from 'path'

function capitalize(input: string): string {
  if (!input) return '';

  return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();
}

function lowerFirstLetter(input: string): string {
  if (!input) return '';

  return input.charAt(0).toLowerCase() + input.slice(1);
}

function getFilenameWithoutExtension(filePath: string): string {
  const filenameWithExtension = basename(filePath);
  const fileExtension = extname(filenameWithExtension);

  return filenameWithExtension.replace(fileExtension, '');
}

const get_react_template_type = (srcs : string[]) : ReactTemplateType => {
  if(srcs.length > 1) {
    return 'Multi'
  } else {
    return 'Single'
  }
}

/**
 * Generated by ChatGPT4
 * Recursively copies the contents of a source directory to a destination directory.
 * This function is synchronous and will block other code execution while copying.
 *
 * TODO: copy this function to utils module
 * @param {string} src - The path to the source directory.
 * @param {string} dest - The path to the destination directory.
 */
function copyDirectorySync(src : string, dest : string) {
  try {
    mkdirSync(dest, { recursive: true });

    const entries = readdirSync(src, { withFileTypes: true });

    for (const entry of entries) {
      const srcPath = join(src, entry.name);
      const destPath = join(dest, entry.name);

      if (entry.isDirectory()) {
        copyDirectorySync(srcPath, destPath);
      } else {
        copyFileSync(srcPath, destPath);
      }
    }
  } catch (error) {
    console.error(`Error copying directory: ${error}`);
  }
}

/**
 * Generated by ChatGPT4
 * Creates a directory if it does not exist, or removes all its files and
 * subdirectories if it already exists.
 *
 * @param path - The path of the directory to create or clean.
 */
function mkOrCleanDir(path: string): void {
  if (existsSync(path)) {
    readdirSync(path).forEach((file) => {
      const curPath = `${path}/${file}`;
      if (lstatSync(curPath).isDirectory()) { // recursively remove directory
        rmSync(curPath, { recursive: true });
      } else { // delete file
        unlinkSync(curPath);
      }
    });
  } else { // create directory
    mkdirSync(path, { recursive: true });
  }
}

const isBundled = (task : Task) => {
  return task.inlineCss && task.inlineJs && task.inlineImage && !task.externalStyle
}

const getTargetDir = (base : string, id : string, task : Task) => {
  return isBundled(task) ? base : join(base, id)
}

const getDefaultTargetDir = (task : Task, id : string, coptions : CompilerOptions) => {
  const base = join(coptions.wDir, task.contentDirSuffix ?? '', dirname(task.sources[0]))
  return getTargetDir(base, id, task)
}

const getId = (task : Task) => {
  return task.id ?? capitalize(getFilenameWithoutExtension(task.sources[0]))
}

/**
 * Creates a temporary React project to get compiled by webpack:
 * - 1 create project directory in temporary directory
 * - 2 copy resources (content, main, index, css)
 * @param task     compilation task
 * @param coptions compiler options
 * @returns        TmpProject data
 */
export const create_react_project = (task : Task, coptions : CompilerOptions) : ReactProjectData => {
  const task_id                  = getId(task)
  const tmp_project_dir          = task.tmpDir ? join(coptions.wDir, task.tmpDir, task_id) : join(tmpdir(), task_id);
  const react_template           = coptions.getReactTemplate(get_react_template_type(task.sources))
  const react_template_path      = join(coptions.templateDir, react_template)
  const react_template_path_dest = join(tmp_project_dir, react_template)
  const default_react_comps_path = join(coptions.templateDir, coptions.reactComponents)
  const react_comps_path_dest    = join(tmp_project_dir, coptions.reactComponents)
  const index_html_path          = join(coptions.templateDir, coptions.htmlTemplate)
  const index_html_path_dest     = join(tmp_project_dir, coptions.htmlTemplate)
  const target_dir               = task.targetDir ? getTargetDir(join(coptions.wDir, task.targetDir), task_id, task) : getDefaultTargetDir(task, task_id, coptions)
  mkOrCleanDir(tmp_project_dir)
  const copy                     = []
  if (task.sources.length == 1) {
    const content              = task.sources[0]
    const content_path         = join(coptions.wDir, task.contentDirSuffix ?? '', content)
    const content_path_dest    = join(tmp_project_dir, 'content.md')
    copy.push({ from : content_path, to : content_path_dest })
    copyFileSync(content_path, content_path_dest)
  } else {
    throw new Error(`Multi sources not supported (task '${task_id}')`)
  }
  copyFileSync(react_template_path, react_template_path_dest)
  copyFileSync(index_html_path, index_html_path_dest)
  if (task.components == 'Default') {
    copyFileSync(default_react_comps_path, react_comps_path_dest)
    // copy components css
    copyDirectorySync(join(coptions.templateDir), tmp_project_dir)
  } else {
    throw new Error(`Non default components '${coptions.reactComponents}' not supported yet (task '${task_id}')`)
  }
  var styles : string[] = []
  if (!task.externalStyle) {
    task.styles.forEach(style => {
      const style_path      = join(coptions.wDir, task.contentDirSuffix ?? '', style)
      const style_path_dest = join(tmp_project_dir, basename(style))
      copy.push({ from : style_path, to : style_path_dest })
      styles.push(style_path_dest)
      copyFileSync(style_path, style_path_dest)
    })
  } else {
    styles = task.styles
  }
  // copy tsconfig
  copyFileSync(join(coptions.templateDir, 'tsconfig.json'), join(tmp_project_dir, 'tsconfig.json'))
  copyFileSync(join(coptions.templateDir, 'react-app-env.d.ts'), join(tmp_project_dir, 'react-app-env.d.ts'))
  return {
    title         : task_id,
    dir           : tmp_project_dir,            // path to tmp project
    targetDir     : target_dir,
    targetName    : isBundled(task) ? lowerFirstLetter(task_id) + '.html' : 'index.html',
    main          : react_template_path_dest,   // path to main.tsx
    index         : index_html_path_dest,       // path in index.html
    styles        : styles,                     // list of styles
    externalStyle : task.externalStyle,
    prismStyle    : task.prismStyle ?? 'prism-one-light.css',
    inlineCss     : task.inlineCss,
    inlineImage   : task.inlineImage,
    inlineJs      : task.inlineJs,
    hasKatex      : true,
    hasPrism      : true,
    copy          : copy,
    license       : task.license ? task.license : false
  }
}