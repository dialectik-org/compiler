
import { copyFileSync, existsSync, lstatSync, mkdirSync, readdirSync, rmSync, unlinkSync, statSync } from 'fs'
import { join, basename, extname, resolve } from 'path'

export function isOnlineUrl(path: string): boolean {
  // Regular expression to match URLs
  const urlRegex: RegExp = /^(https?:\/\/|ftp:\/\/)/i;

  // Test the path against the regular expression
  return urlRegex.test(path);
}

export function capitalize(input: string): string {
  if (!input) return '';

  return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();
}

export function lowerFirstLetter(input: string): string {
  if (!input) return '';

  return input.charAt(0).toLowerCase() + input.slice(1);
}

export function getFilenameWithoutExtension(filePath: string): string {
  const filenameWithExtension = basename(filePath);
  const fileExtension = extname(filenameWithExtension);

  return filenameWithExtension.replace(fileExtension, '');
}

function findFirstExistingDirSync(dirPaths: string[]): string | null {
  for (const dirPath of dirPaths) {
    try {
      const fullPath = resolve(dirPath);
      const stats = statSync(fullPath);

      if (stats.isDirectory()) {
        return fullPath;
      }
    } catch (error : any) {
      if (error.code !== 'ENOENT') {
        console.error(`Error checking path "${dirPath}":`, error);
      }
    }
  }

  return null;
}

/**
 * Generated by ChatGPT4
 * Recursively copies the contents of a source directory to a destination directory.
 * This function is synchronous and will block other code execution while copying.
 *
 * TODO: copy this function to utils module
 * @param {string[]} srcs - A list of paths to the source directory. The first that exists is considered
 * @param {string} dest - The path to the destination directory.
 */
export function copyDirectorySync(srcs : string[], dest : string) {
  try {
    mkdirSync(dest, { recursive: true });
    const src = findFirstExistingDirSync(srcs);
    if (src) {
      const entries = readdirSync(src, { withFileTypes: true });

      for (const entry of entries) {
        const srcPath = join(src, entry.name);
        const destPath = join(dest, entry.name);

        if (entry.isDirectory()) {
          copyDirectorySync([srcPath], destPath);
        } else {
          copyFileSync(srcPath, destPath);
        }
      }
    } else {
      console.error(`Error, directories ${srcs} not found`)
    }
  } catch (error) {
    console.error(`Error copying directory: ${error}`);
  }
}

/**
 * Generated by ChatGPT4
 * Creates a directory if it does not exist, or removes all its files and
 * subdirectories if it already exists.
 *
 * @param path - The path of the directory to create or clean.
 */
export function mkOrCleanDir(path: string): void {
  if (existsSync(path)) {
    readdirSync(path).forEach((file) => {
      const curPath = `${path}/${file}`;
      if (lstatSync(curPath).isDirectory()) { // recursively remove directory
        rmSync(curPath, { recursive: true });
      } else { // delete file
        unlinkSync(curPath);
      }
    });
  } else { // create directory
    mkdirSync(path, { recursive: true });
  }
}
